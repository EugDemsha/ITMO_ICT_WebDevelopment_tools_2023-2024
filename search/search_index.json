{"config":{"lang":["ru"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Main","text":"<p>\u0414\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430\u0446\u0438\u044f \u0434\u043b\u044f \u043b\u0430\u0431\u043e\u0440\u0430\u0442\u043e\u0440\u043d\u044b\u0445 \u0440\u0430\u0431\u043e\u0442 \u043f\u043e \u0434\u0438\u0441\u0446\u0438\u043f\u043b\u0438\u043d\u0435 \u00ab\u0421\u0440\u0435\u0434\u0441\u0442\u0432\u0430 \u0432\u0435\u0431-\u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f\u00bb \u0441\u0442\u0443\u0434\u0435\u043d\u0442\u043a\u0438 \u0433\u0440\u0443\u043f\u043f\u044b K33422 \u0414\u0435\u043c\u0448\u0438 \u0415\u0432\u0433\u0435\u043d\u0438\u0438</p>"},{"location":"lab1/auth/","title":"\u041f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c","text":"<p>\u041c\u043e\u0434\u0435\u043b\u0438 \u0434\u043b\u044f \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u043e\u043a\u0430\u0436\u0443\u0442\u0441\u044f \u0432 \u0431\u0430\u0437\u0435 \u0434\u0430\u043d\u043d\u044b\u0445 \u0438\u043b\u0438 \u0431\u0443\u0434\u0443\u0442 \u0444\u043e\u0440\u043c\u0430\u043c\u0438 \u0434\u043b\u044f \u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u0438, \u0432\u0445\u043e\u0434\u0430 \u0438 \u0441\u043c\u0435\u043d\u044b \u043f\u0430\u0440\u043e\u043b\u044f:</p> \u041c\u043e\u0434\u0435\u043b\u044c \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f\u041c\u043e\u0434\u0435\u043b\u0438 \u0434\u043b\u044f \u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u0438 \u0438 \u0430\u0443\u0442\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0446\u0438\u0438\u041c\u043e\u0434\u0435\u043b\u044c \u0434\u043b\u044f \u0441\u043c\u0435\u043d\u044b \u043f\u0430\u0440\u043e\u043b\u044f <pre><code>from sqlmodel import SQLModel, Field, Relationship\n\n\n\nclass User(SQLModel, table=True):\n    id: int | None = Field(default=None, primary_key=True)\n    username: str = Field(index=True)\n    email: str\n    password: str\n    is_admin: bool = False\n\n    expenses: list[Expense] | None = Relationship(back_populates=\"user\")\n    incomes: list[Income] | None = Relationship(back_populates=\"user\")\n    accounts: list[Account] | None = Relationship(back_populates=\"user\")\n    categories: list[ExpenseCategory] | None = Relationship(back_populates=\"user\")\n    sources: list[SourceOfIncome] | None = Relationship(back_populates=\"user\")\n</code></pre> <pre><code>from sqlmodel import SQLModel, Field, Relationship\nfrom pydantic import field_validator, EmailStr\n\n\n\nclass UserInput(SQLModel):\n    username: str\n    password: str = Field(max_length=256, min_length=6)\n    password2: str\n    email: EmailStr\n\n    @field_validator('password2')\n    def password_match(cls, v, values, **kwargs):\n        if 'password' in values.data and v != values.data['password']:\n            raise ValueError('passwords don\\'t match')\n        return v\n\n\nclass UserLogin(SQLModel):\n    username: str\n    password: str\n</code></pre> <pre><code>from sqlmodel import SQLModel, Field, Relationship\nfrom pydantic import field_validator, EmailStr\n\n\n\nclass UserPasswordChange(SQLModel):\n    old_password: str\n    new_password: str = Field(max_length=256, min_length=6)\n    new_password2: str\n\n    @field_validator('new_password2')\n    def password_match(cls, v, values, **kwargs):\n        if 'new_password' in values.data and v != values.data['new_password']:\n            raise ValueError('passwords don\\'t match')\n        return v\n</code></pre> <p>\u0412 \u044d\u0442\u043e\u043c \u043a\u043b\u0430\u0441\u0441\u0435 (\u043e\u0431\u0440\u0430\u0431\u043e\u0442\u0447\u0438\u043a\u0435) \u043f\u0440\u0435\u0434\u043e\u0441\u0442\u0430\u0432\u043b\u044f\u0435\u0442 \u043c\u0435\u0442\u043e\u0434\u044b, \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e \u043a\u043e\u0442\u043e\u0440\u044b\u0445 \u0440\u0435\u0430\u043b\u0438\u0437\u0443\u0435\u0442\u0441\u044f \u0430\u0432\u0442\u043e\u0440\u0438\u0437\u0430\u0446\u0438\u044f, \u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u044f, \u0433\u0435\u043d\u0435\u0440\u0430\u0446\u0438\u044f JWT-\u0442\u043e\u043a\u0435\u043d\u043e\u0432, \u0430\u0443\u0442\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0446\u0438\u044f \u043f\u043e JWT-\u0442\u043e\u043a\u0435\u043d\u0443, \u0445\u044d\u0448\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 \u043f\u0430\u0440\u043e\u043b\u0435\u0439:</p> \u0421\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u043a\u043b\u0430\u0441\u0441\u0430\u041e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0430 \u043f\u0430\u0440\u043e\u043b\u044f\u041e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0430 \u0442\u043e\u043a\u0435\u043d\u0430\u0422\u0435\u043a\u0443\u0449\u0438\u0439 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c <pre><code>import datetime\nfrom fastapi import Security, HTTPException\nfrom fastapi.security import HTTPBearer, HTTPAuthorizationCredentials\nfrom passlib.context import CryptContext\nimport jwt\nfrom starlette import status\nfrom user_repo.user_functions import find_user\n\n\nclass AuthHandler:\n    security = HTTPBearer()\n    pwd_context = CryptContext(schemes=['bcrypt'])\n    secret = 'supersecret'\n</code></pre> <pre><code>    def get_password_hash(self, password):\n        return self.pwd_context.hash(password)\n\n    def verify_password(self, pwd, hashed_pwd):\n        return self.pwd_context.verify(pwd, hashed_pwd)\n</code></pre> <pre><code>    def encode_token(self, user_id):\n        payload = {\n            'exp': datetime.datetime.utcnow() + datetime.timedelta(hours=8),\n            'iat': datetime.datetime.utcnow(),\n            'sub': user_id\n        }\n        return jwt.encode(payload, self.secret, algorithm='HS256')\n\n    def decode_token(self, token):\n        try:\n            payload = jwt.decode(token, self.secret, algorithms=['HS256'])\n            return payload['sub']\n        except jwt.ExpiredSignatureError:\n            raise HTTPException(status_code=401, detail='Expired signature')\n        except jwt.InvalidTokenError:\n            raise HTTPException(status_code=401, detail='Invalid token')\n\n    def auth_wrapper(self, auth: HTTPAuthorizationCredentials = Security(security)):\n        return self.decode_token(auth.credentials)\n</code></pre> <pre><code>    def get_current_user(self, auth: HTTPAuthorizationCredentials = Security(security)):\n        credentials_exception = HTTPException(\n            status_code=status.HTTP_401_UNAUTHORIZED,\n            detail='Could not validate credentials'\n        )\n        username = self.decode_token(auth.credentials)\n        if username is None:\n            raise credentials_exception\n        user = find_user(username)\n        if user is None:\n            raise credentials_exception\n        return user\n</code></pre> <p>\u042d\u043d\u0434\u043f\u043e\u0439\u043d\u0442\u044b \u0434\u043b\u044f \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f:</p> \u0420\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u044f\u0412\u0445\u043e\u0434\u0422\u0435\u043a\u0443\u0449\u0438\u0439 \u044e\u0437\u0435\u0440 \u0438 \u0441\u043f\u0438\u0441\u043e\u043a \u044e\u0437\u0435\u0440\u043e\u0432\u0421\u043c\u0435\u043d\u0430 \u043f\u0430\u0440\u043e\u043b\u044f <pre><code>from fastapi import APIRouter, HTTPException, Depends\nfrom user_repo.auth import AuthHandler\nfrom sqlalchemy.orm import Session\nfrom connections import get_session\nfrom user_repo.user_models import UserInput, User, UserLogin, UserPasswordChange\nfrom user_repo.user_functions import select_all_users, find_user\n\nuser_router = APIRouter()\nauth_handler = AuthHandler()\n\n\n@user_router.post('/registration', status_code=201, tags=['users'],\n                  description='Register new user')\ndef register(user: UserInput, session: Session = Depends(get_session)):\n    users = select_all_users()\n    if any(x.username == user.username for x in users):\n        raise HTTPException(status_code=400, detail='Username is taken')\n    hashed_pwd = auth_handler.get_password_hash(user.password)\n    u = User(username=user.username, password=hashed_pwd, email=user.email)\n    session.add(u)\n    session.commit()\n    # return JSONResponse(content=\"Registration successful\", status_code=HTTP_201_CREATED)\n    return {\"message\": \"Registration successful\"}\n</code></pre> <pre><code>from fastapi import APIRouter, HTTPException, Depends\nfrom user_repo.auth import AuthHandler\nfrom sqlalchemy.orm import Session\nfrom connections import get_session\nfrom user_repo.user_models import UserInput, User, UserLogin, UserPasswordChange\nfrom user_repo.user_functions import select_all_users, find_user\n\nuser_router = APIRouter()\nauth_handler = AuthHandler()\n\n\n@user_router.post('/login', tags=['users'])\ndef login(user: UserLogin):\n    user_found = find_user(user.username)\n    if not user_found:\n        raise HTTPException(status_code=401, detail='Invalid username and/or password')\n    verified = auth_handler.verify_password(user.password, user_found.password)\n    if not verified:\n        raise HTTPException(status_code=401, detail='Invalid username and/or password')\n    token = auth_handler.encode_token(user_found.username)\n    return {'token': token}\n</code></pre> <pre><code>    from fastapi import APIRouter, HTTPException, Depends\nfrom user_repo.auth import AuthHandler\nfrom sqlalchemy.orm import Session\nfrom connections import get_session\nfrom user_repo.user_models import UserInput, User, UserLogin, UserPasswordChange\nfrom user_repo.user_functions import select_all_users, find_user\n\nuser_router = APIRouter()\nauth_handler = AuthHandler()\n\n\n@user_router.get('/users/me', tags=['users'])\ndef get_current_user(user: User = Depends(auth_handler.get_current_user)):\n    return {\"id\": user.id, \"username\": user.username, \"email\": user.email, \"is_admin\": user.is_admin}\n\n\n@user_router.get(\"/users\", tags=['users'])\nasync def get_all_users(session: Session = Depends(get_session),\n                        user=Depends(auth_handler.get_current_user)):\n    if not user.is_admin:\n        raise HTTPException(status_code=403, detail=\"You do not have permission to access this resource.\")\n\n    users = session.query(User).all()\n    return {\"users\": [user.dict() for user in users]}\n</code></pre> <pre><code>from fastapi import APIRouter, HTTPException, Depends\nfrom user_repo.auth import AuthHandler\nfrom sqlalchemy.orm import Session\nfrom connections import get_session\nfrom user_repo.user_models import UserInput, User, UserLogin, UserPasswordChange\nfrom user_repo.user_functions import select_all_users, find_user\n\nuser_router = APIRouter()\nauth_handler = AuthHandler()\n\n\n@user_router.put(\"/users/change_password\", tags=['users'])\nasync def change_user_password(user_update: UserPasswordChange, session: Session = Depends(get_session),\n                               user=Depends(auth_handler.get_current_user)):\n\n    # db_user = session.query(User).filter(User.id == user.id).first()\n    db_user = session.get(User, user.id)\n\n    if not auth_handler.verify_password(user_update.old_password, db_user.password):\n        raise HTTPException(status_code=400, detail=\"Current password is incorrect.\")\n\n    db_user.password = auth_handler.get_password_hash(user_update.new_password)\n    session.commit()\n\n    return {\"message\": \"Password changed successfully.\"}\n</code></pre>"},{"location":"lab1/endpoints/","title":"\u042d\u043d\u0434\u043f\u043e\u0439\u043d\u0442\u044b","text":"<p>\u042d\u043d\u0434\u043f\u043e\u0439\u043d\u0442\u044b \u0434\u043b\u044f \u0442\u0440\u0430\u0442:</p> \u0421\u043e\u0437\u0434\u0430\u043d\u0438\u0435\u041f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u0435\u0418\u0437\u043c\u0435\u043d\u0435\u043d\u0438\u0435\u0423\u0434\u0430\u043b\u0435\u043d\u0438\u0435 <pre><code>from fastapi import APIRouter, Depends, HTTPException\nfrom sqlalchemy import cast, Integer\nfrom sqlalchemy.orm import Session\nfrom connections import get_session\nfrom models import Expense, ExpenseCategory, Account\nfrom user_repo.user_endpoints import auth_handler\n\nexpense_router = APIRouter(dependencies=[Depends(auth_handler.auth_wrapper)])\n\n\n\n# Create a new expense\n@expense_router.post(\"/expenses/\", tags=['expenses'])\nasync def create_expense(expense: Expense, session: Session = Depends(get_session),\n                         user=Depends(auth_handler.get_current_user)):\n    new_expense = Expense(user_id=user.id, amount=expense.amount, transaction_date=expense.transaction_date)\n\n    # Check if the category_id and account_id belong to the authorized user\n    category = session.query(ExpenseCategory).filter_by(id=expense.category_id, user_id=user.id).first()\n    account = session.query(Account).filter_by(id=expense.account_id, user_id=user.id).first()\n\n    if category and account:\n        new_expense.category_id = expense.category_id\n        new_expense.account_id = expense.account_id\n        session.add(new_expense)\n        session.commit()\n        return {\"message\": \"Expense created successfully\"}\n    else:\n        raise HTTPException(status_code=403, detail=\"Unauthorized to add this category_id or account_id\")\n</code></pre> <pre><code>from fastapi import APIRouter, Depends, HTTPException\nfrom sqlalchemy import cast, Integer\nfrom sqlalchemy.orm import Session\nfrom connections import get_session\nfrom models import Expense, ExpenseCategory, Account\nfrom user_repo.user_endpoints import auth_handler\n\nexpense_router = APIRouter(dependencies=[Depends(auth_handler.auth_wrapper)])\n\n\n\n# Get all expenses for a specific user\n@expense_router.get(\"/expenses/list\", tags=['expenses'])\nasync def get_expenses(session: Session = Depends(get_session),\n                       user=Depends(auth_handler.get_current_user)):\n    #user_expenses = session.query(Expense).filter(Expense.user_id == user_id).all()\n    user_expenses = session.query(Expense).filter(Expense.user_id == cast(user.id, Integer)).all()\n\n    return {\"user_id\": user.id, \"expenses\": user_expenses}\n</code></pre> <pre><code>from fastapi import APIRouter, Depends, HTTPException\nfrom sqlalchemy import cast, Integer\nfrom sqlalchemy.orm import Session\nfrom connections import get_session\nfrom models import Expense, ExpenseCategory, Account\nfrom user_repo.user_endpoints import auth_handler\n\nexpense_router = APIRouter(dependencies=[Depends(auth_handler.auth_wrapper)])\n\n\n\n# Update an existing expense using PATCH method\n@expense_router.patch(\"/expenses/{expense_id}\", tags=['expenses'])\nasync def update_expense(expense_id: int, expense: Expense, session: Session = Depends(get_session),\n                         user=Depends(auth_handler.get_current_user)):\n    existing_expense = session.get(Expense, expense_id)\n\n    if existing_expense:\n        # Check if the expense belongs to the authorized user\n        if existing_expense.user_id == user.id:\n            for field, value in expense.dict(exclude_unset=True).items():\n                setattr(existing_expense, field, value)\n            session.commit()\n            return {\"message\": \"Expense updated successfully\"}\n        else:\n            raise HTTPException(status_code=403, detail=\"Unauthorized to update this expense\")\n\n    raise HTTPException(status_code=404, detail=\"Expense not found\")\n</code></pre> <pre><code>from fastapi import APIRouter, Depends, HTTPException\nfrom sqlalchemy import cast, Integer\nfrom sqlalchemy.orm import Session\nfrom connections import get_session\nfrom models import Expense, ExpenseCategory, Account\nfrom user_repo.user_endpoints import auth_handler\n\nexpense_router = APIRouter(dependencies=[Depends(auth_handler.auth_wrapper)])\n\n\n\n# Delete an existing expense using DELETE method\n@expense_router.delete(\"/expenses/{expense_id}\", tags=['expenses'])\nasync def delete_expense(expense_id: int, session: Session = Depends(get_session),\n                         user=Depends(auth_handler.get_current_user)):\n    existing_expense = session.get(Expense, expense_id)\n    if existing_expense and existing_expense.user_id == user.id:\n        session.delete(existing_expense)\n        session.commit()\n        return {\"message\": \"Expense deleted successfully\"}\n    return {\"message\": \"Expense not found\"}\n</code></pre> <p>\u042d\u043d\u0434\u043f\u043e\u0439\u043d\u0442\u044b \u0434\u043b\u044f \u043a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u0439 \u0442\u0440\u0430\u0442:</p> \u0421\u043e\u0437\u0434\u0430\u043d\u0438\u0435\u041f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u0435\u0418\u0437\u043c\u0435\u043d\u0435\u043d\u0438\u0435\u0423\u0434\u0430\u043b\u0435\u043d\u0438\u0435 <pre><code>from fastapi import APIRouter, Depends, HTTPException\nfrom sqlalchemy.orm import Session\nfrom connections import get_session\nfrom models import ExpenseCategory, CategoryWithExpense\nfrom user_repo.user_endpoints import auth_handler\nfrom typing import List\n\nexpense_category_router = APIRouter(dependencies=[Depends(auth_handler.auth_wrapper)])\n\n\n\n# Create a new expense category\n@expense_category_router.post(\"/expense_categories/\", tags=['expense_categories'])\nasync def create_expense_category(category: ExpenseCategory, session: Session = Depends(get_session),\n                                  user=Depends(auth_handler.get_current_user)):\n    new_category = ExpenseCategory(name=category.name, type=category.type,\n                                   limit_of_expenses=category.limit_of_expenses, user_id=user.id)\n    session.add(new_category)\n    session.commit()\n    return {\"message\": \"Expense category created successfully\"}\n</code></pre> <pre><code>from fastapi import APIRouter, Depends, HTTPException\nfrom sqlalchemy.orm import Session\nfrom connections import get_session\nfrom models import ExpenseCategory, CategoryWithExpense\nfrom user_repo.user_endpoints import auth_handler\nfrom typing import List\n\nexpense_category_router = APIRouter(dependencies=[Depends(auth_handler.auth_wrapper)])\n\n\n# Get all expense categories for a specific user\n@expense_category_router.get(\"/expense_categories/list\", tags=['expense_categories'], response_model=List[CategoryWithExpense])\nasync def get_expense_categories(session: Session = Depends(get_session),\n                                 user=Depends(auth_handler.get_current_user)):\n\n    user_categories = session.query(ExpenseCategory).filter(ExpenseCategory.user_id == user.id).all()\n    return user_categories\n</code></pre> <pre><code>from fastapi import APIRouter, Depends, HTTPException\nfrom sqlalchemy.orm import Session\nfrom connections import get_session\nfrom models import ExpenseCategory, CategoryWithExpense\nfrom user_repo.user_endpoints import auth_handler\nfrom typing import List\n\nexpense_category_router = APIRouter(dependencies=[Depends(auth_handler.auth_wrapper)])\n\n\n\n# Update an existing expense category using PATCH method\n@expense_category_router.patch(\"/expense_categories/{category_id}\", tags=['expense_categories'])\nasync def update_expense_category(category_id: int, category: ExpenseCategory,\n                                  session: Session = Depends(get_session),\n                                  user=Depends(auth_handler.get_current_user)):\n    existing_category = session.query(ExpenseCategory).filter_by(id=category_id, user_id=user.id).first()\n    if existing_category:\n        for field, value in category.dict(exclude_unset=True).items():\n            setattr(existing_category, field, value)\n        session.commit()\n        return {\"message\": \"Expense category updated successfully\"}\n    raise HTTPException(status_code=404, detail=\"Expense category not found\")\n</code></pre> <pre><code>from fastapi import APIRouter, Depends, HTTPException\nfrom sqlalchemy.orm import Session\nfrom connections import get_session\nfrom models import ExpenseCategory, CategoryWithExpense\nfrom user_repo.user_endpoints import auth_handler\nfrom typing import List\n\nexpense_category_router = APIRouter(dependencies=[Depends(auth_handler.auth_wrapper)])\n\n\n\n# Delete an existing expense category using DELETE method\n@expense_category_router.delete(\"/expense_categories/{category_id}\", tags=['expense_categories'])\nasync def delete_expense_category(category_id: int, session: Session = Depends(get_session),\n                                  user=Depends(auth_handler.get_current_user)):\n    existing_category = session.query(ExpenseCategory).filter_by(id=category_id, user_id=user.id).first()\n    if existing_category:\n        session.delete(existing_category)\n        session.commit()\n        return {\"message\": \"Expense category deleted successfully\"}\n    raise HTTPException(status_code=404, detail=\"Expense category not found\")\n</code></pre> <p>\u042d\u043d\u0434\u043f\u043e\u0439\u043d\u0442\u044b \u0434\u043b\u044f \u043f\u043b\u0430\u0442\u0435\u0436\u043d\u044b\u0445 \u0430\u043a\u043a\u0430\u0443\u043d\u0442\u043e\u0432:</p> \u0421\u043e\u0437\u0434\u0430\u043d\u0438\u0435\u041f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u0435\u0418\u0437\u043c\u0435\u043d\u0435\u043d\u0438\u0435\u0423\u0434\u0430\u043b\u0435\u043d\u0438\u0435 <pre><code>from fastapi import APIRouter, Depends, HTTPException\nfrom sqlalchemy.orm import Session\nfrom connections import get_session\nfrom models import Account\nfrom user_repo.user_endpoints import auth_handler\n\naccount_router = APIRouter(dependencies=[Depends(auth_handler.auth_wrapper)])\n\n\n\n# Create a new account\n@account_router.post(\"/accounts/\", tags=['accounts'])\nasync def create_account(account: Account, session: Session = Depends(get_session),\n                         user=Depends(auth_handler.get_current_user)):\n    new_account = Account(name=account.name, balance=account.balance, user_id=user.id)\n    session.add(new_account)\n    session.commit()\n    return {\"message\": \"Account created successfully\"}\n</code></pre> <pre><code>from fastapi import APIRouter, Depends, HTTPException\nfrom sqlalchemy.orm import Session\nfrom connections import get_session\nfrom models import Account\nfrom user_repo.user_endpoints import auth_handler\n\naccount_router = APIRouter(dependencies=[Depends(auth_handler.auth_wrapper)])\n\n\n\n# Get all accounts for a specific user\n@account_router.get(\"/accounts/list\", tags=['accounts'])\nasync def get_accounts(session: Session = Depends(get_session),\n                       user=Depends(auth_handler.get_current_user)):\n    user_accounts = session.query(Account).filter(Account.user_id == user.id).all()\n    return {\"user_id\": user.id, \"accounts\": user_accounts}\n</code></pre> <pre><code>from fastapi import APIRouter, Depends, HTTPException\nfrom sqlalchemy.orm import Session\nfrom connections import get_session\nfrom models import Account\nfrom user_repo.user_endpoints import auth_handler\n\naccount_router = APIRouter(dependencies=[Depends(auth_handler.auth_wrapper)])\n\n\n\n# Update an existing account using PATCH method\n@account_router.patch(\"/accounts/{account_id}\", tags=['accounts'])\nasync def update_account(account_id: int, account: Account,\n                         session: Session = Depends(get_session),\n                         user=Depends(auth_handler.get_current_user)):\n    existing_account = session.query(Account).filter_by(id=account_id, user_id=user.id).first()\n    if existing_account:\n        for field, value in account.dict(exclude_unset=True).items():\n            setattr(existing_account, field, value)\n        session.commit()\n        return {\"message\": \"Account updated successfully\"}\n    raise HTTPException(status_code=404, detail=\"Account not found\")\n</code></pre> <pre><code>from fastapi import APIRouter, Depends, HTTPException\nfrom sqlalchemy.orm import Session\nfrom connections import get_session\nfrom models import Account\nfrom user_repo.user_endpoints import auth_handler\n\naccount_router = APIRouter(dependencies=[Depends(auth_handler.auth_wrapper)])\n\n\n\n# Delete an existing account using DELETE method\n@account_router.delete(\"/accounts/{account_id}\", tags=['accounts'])\nasync def delete_account(account_id: int, session: Session = Depends(get_session),\n                         user=Depends(auth_handler.get_current_user)):\n    existing_account = session.query(Account).filter_by(id=account_id, user_id=user.id).first()\n    if existing_account:\n        session.delete(existing_account)\n        session.commit()\n        return {\"message\": \"Account deleted successfully\"}\n    raise HTTPException(status_code=404, detail=\"Account not found\")\n</code></pre>"},{"location":"lab1/migrations/","title":"\u041c\u0438\u0433\u0440\u0430\u0446\u0438\u0438","text":"<p>\u0410\u0434\u0440\u0435\u0441 \u0431\u0430\u0437\u044b \u0434\u0430\u043d\u043d\u044b\u0445 \u0432 \u0444\u0430\u0439\u043b\u0435 <code>alembic.ini</code>:</p> <p><code>sqlalchemy.url = postgresql+psycopg2://${DB_USER}:${DB_PASS}@${DB_HOST}/${DB_NAME}</code></p> <p>\u0424\u0430\u0439\u043b <code>env.py</code>, \u0433\u0434\u0435 \"\u0441\u043e\u0431\u0438\u0440\u0430\u0435\u0442\u0441\u044f\" \u0430\u0434\u0440\u0435\u0441 \u0431\u0430\u0437\u044b \u0434\u0430\u043d\u043d\u044b\u0445 \u0438\u0437 \u0441\u0435\u043a\u0440\u0435\u0442\u043d\u044b\u0445 \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u044b\u0445 \u043e\u043a\u0440\u0443\u0436\u0435\u043d\u0438\u044f:</p> <pre><code>def run_migrations_online() -&gt; None:\n\n\n    from sqlalchemy import create_engine\n    import re\n    import os\n    from dotenv import load_dotenv\n    load_dotenv()\n\n    url_tokens = {\n        \"DB_USER\": os.getenv(\"DB_USER\", \"\"),\n        \"DB_PASS\": os.getenv(\"DB_PASS\", \"\"),\n        \"DB_HOST\": os.getenv(\"DB_HOST\", \"\"),\n        \"DB_NAME\": os.getenv(\"DB_NAME\", \"\")\n    }\n\n    url = config.get_main_option(\"sqlalchemy.url\")\n\n    url = re.sub(r\"\\${(.+?)}\", lambda m: url_tokens[m.group(1)], url)\n\n    print(url)\n\n    connectable = create_engine(url)\n\n    with connectable.connect() as connection:\n        context.configure(\n            connection=connection, target_metadata=target_metadata,\n            compare_type=True,\n            compare_server_default=True,\n        )\n\n        with context.begin_transaction():\n            context.run_migrations()\n</code></pre> <p>\u041e\u0434\u043d\u0430 \u0438\u0437 \u0437\u0430\u043f\u0438\u0441\u0435\u0439 \u0438\u0437\u043c\u0435\u043d\u0435\u043d\u0438\u044f \u0431\u0430\u0437\u044b \u0434\u0430\u043d\u043d\u044b\u0445:</p> <pre><code>def run_migrations_online() -&gt; None:\n\n\"\"\"alter admin\n\nRevision ID: e4029c66847d\nRevises: f5268f7e59b7\nCreate Date: 2024-06-10 14:45:30.141151\n\n\"\"\"\nfrom typing import Sequence, Union\n\nfrom alembic import op\nimport sqlalchemy as sa\nimport sqlmodel\n\n\n# revision identifiers, used by Alembic.\nrevision: str = 'e4029c66847d'\ndown_revision: Union[str, None] = 'f5268f7e59b7'\nbranch_labels: Union[str, Sequence[str], None] = None\ndepends_on: Union[str, Sequence[str], None] = None\n\n\ndef upgrade() -&gt; None:\n    # ### commands auto generated by Alembic - please adjust! ###\n    op.alter_column('user', 'is_admin',\n               existing_type=sa.BOOLEAN(),\n               nullable=False)\n    # ### end Alembic commands ###\n\n\ndef downgrade() -&gt; None:\n    # ### commands auto generated by Alembic - please adjust! ###\n    op.alter_column('user', 'is_admin',\n               existing_type=sa.BOOLEAN(),\n               nullable=True)\n    # ### end Alembic commands ###\n</code></pre>"},{"location":"lab1/models/","title":"\u041c\u043e\u0434\u0435\u043b\u0438","text":"<p>\u041f\u0440\u0435\u0434\u043c\u0435\u0442\u043d\u0430\u044f \u043e\u0431\u043b\u0430\u0441\u0442\u044c: \u0420\u0430\u0437\u0440\u0430\u0431\u043e\u0442\u043a\u0430 \u0441\u0435\u0440\u0432\u0438\u0441\u0430 \u0434\u043b\u044f \u0443\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0438\u044f \u043b\u0438\u0447\u043d\u044b\u043c\u0438 \u0444\u0438\u043d\u0430\u043d\u0441\u0430\u043c\u0438</p> <p>\u0421\u043e\u0437\u0434\u0430\u0434\u0438\u043c \u043c\u043e\u0434\u0435\u043b\u0438 \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e <code>SQLModel</code>:</p> \u0422\u0440\u0430\u0442\u044b\u041f\u043e\u0441\u0442\u0443\u043f\u043b\u0435\u043d\u0438\u044f\u041a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u0438 \u0442\u0440\u0430\u0442\u041f\u043b\u0430\u0442\u0435\u0436\u043d\u044b\u0439 \u0430\u043a\u043a\u0430\u0443\u043d\u0442\u0418\u0441\u0442\u043e\u0447\u043d\u0438\u043a \u043f\u043e\u0441\u0442\u0443\u043f\u043b\u0435\u043d\u0438\u0439 <pre><code>from sqlmodel import SQLModel, Field, Relationship\nfrom datetime import date\nfrom typing import ForwardRef\n\nUser = ForwardRef(\"User\")\n\n\nclass Expense(SQLModel, table=True):\n    id: int | None = Field(default=None, primary_key=True)\n    amount: int\n    transaction_date: date = Field(default_factory=date.today)\n    user_id: int = Field(default=None, foreign_key=\"user.id\")\n    account_id: int | None = Field(foreign_key=\"account.id\")\n    category_id: int | None = Field(foreign_key=\"expensecategory.id\")\n\n    user: User | None = Relationship(back_populates=\"expenses\")\n    account: Account | None = Relationship(back_populates=\"expenses\")\n    category: ExpenseCategory | None = Relationship(back_populates=\"expenses\")\n</code></pre> <pre><code>from sqlmodel import SQLModel, Field, Relationship\nfrom datetime import date\n\n\nclass Income(SQLModel, table=True):\n    id: int | None = Field(default=None, primary_key=True)\n    amount: int\n    transaction_date: date = Field(default_factory=date.today)\n    user_id: int = Field(foreign_key=\"user.id\")\n    source_id: int | None = Field(foreign_key=\"sourceofincome.id\")\n    account_id: int | None = Field(foreign_key=\"account.id\")\n\n    user: User | None = Relationship(back_populates=\"incomes\")\n    account: Account | None = Relationship(back_populates=\"incomes\")\n    source: SourceOfIncome | None = Relationship(back_populates=\"incomes\")\n</code></pre> <pre><code>from enum import Enum\nfrom sqlmodel import SQLModel, Field, Relationship\n\n\nclass ExpenseType(str, Enum):\n    goal = \"goal\"\n    expense = \"expense\"\n    debt = \"debt\"\n\nclass BaseCategory(SQLModel):\n    id: int | None\n    name: str\n    type: ExpenseType\n    limit_of_expenses: int | None\n\nclass ExpenseCategory(BaseCategory, table=True):\n    id: int | None = Field(default=None, primary_key=True)\n    name: str\n    type: ExpenseType\n    limit_of_expenses: int | None\n    user_id: int = Field(foreign_key=\"user.id\")\n\n    user: User | None = Relationship(back_populates=\"categories\")\n    expenses: list[\"Expense\"] | None = Relationship(back_populates=\"category\")\n\n\nclass CategoryWithExpense(BaseCategory):\n    expenses: list[\"Expense\"] = []\n</code></pre> <pre><code>from sqlmodel import SQLModel, Field, Relationship\n\n\nclass Account(SQLModel, table=True):\n    id: int | None = Field(default=None, primary_key=True)\n    name: str\n    balance: int | None\n    user_id: int | None = Field(foreign_key=\"user.id\")\n\n    user: User | None = Relationship(back_populates=\"accounts\")\n    expenses: list[\"Expense\"] | None = Relationship(back_populates=\"account\")\n    incomes: list[\"Income\"] | None = Relationship(back_populates=\"account\")\n</code></pre> <pre><code>from sqlmodel import SQLModel, Field, Relationship\n\n\nclass SourceOfIncome(SQLModel, table=True):\n    id: int | None = Field(default=None, primary_key=True)\n    name: str\n    planning_to_receive: int | None\n    user_id: int = Field(foreign_key=\"user.id\")\n\n    user: User | None = Relationship(back_populates=\"sources\")\n    incomes: list[\"Income\"] | None = Relationship(back_populates=\"source\")\n</code></pre> \u041b\u043e\u0433 \u0441\u043e\u0437\u0434\u0430\u043d\u043d\u044b\u0445 \u0442\u0430\u0431\u043b\u0438\u0446 <pre><code>CREATE TABLE \"user\" (\n        id SERIAL NOT NULL,\n        username VARCHAR NOT NULL,\n        email VARCHAR NOT NULL,\n        password VARCHAR NOT NULL,\n        is_admin BOOLEAN NOT NULL,\n        PRIMARY KEY (id)\n)\n\nCREATE TABLE expensecategory (\n        id SERIAL NOT NULL,\n        name VARCHAR NOT NULL,\n        type expensetype NOT NULL,\n        limit_of_expenses INTEGER,\n        user_id INTEGER NOT NULL,\n        PRIMARY KEY (id),\n        FOREIGN KEY(user_id) REFERENCES \"user\" (id)\n)\n\nCREATE TABLE sourceofincome (\n        id SERIAL NOT NULL,\n        name VARCHAR NOT NULL,\n        planning_to_receive INTEGER,\n        user_id INTEGER NOT NULL,\n        PRIMARY KEY (id),\n        FOREIGN KEY(user_id) REFERENCES \"user\" (id)\n)\n\nCREATE TABLE account (\n        id SERIAL NOT NULL,\n        name VARCHAR NOT NULL,\n        balance INTEGER,\n        user_id INTEGER,\n        PRIMARY KEY (id),\n        FOREIGN KEY(user_id) REFERENCES \"user\" (id)\n)\n\nCREATE TABLE expense (\n        id SERIAL NOT NULL,\n        amount INTEGER NOT NULL,\n        transaction_date DATE NOT NULL,\n        user_id INTEGER NOT NULL,\n        account_id INTEGER,\n        category_id INTEGER,\n        PRIMARY KEY (id),\n        FOREIGN KEY(user_id) REFERENCES \"user\" (id),\n        FOREIGN KEY(account_id) REFERENCES account (id),\n        FOREIGN KEY(category_id) REFERENCES expensecategory (id)\n)\n\nCREATE TABLE income (\n        id SERIAL NOT NULL,\n        amount INTEGER NOT NULL,\n        transaction_date DATE NOT NULL,\n        user_id INTEGER NOT NULL,\n        source_id INTEGER,\n        account_id INTEGER,\n        PRIMARY KEY (id),\n        FOREIGN KEY(user_id) REFERENCES \"user\" (id),\n        FOREIGN KEY(source_id) REFERENCES sourceofincome (id),\n        FOREIGN KEY(account_id) REFERENCES account (id)\n)\n</code></pre> <p>\u041f\u043e\u043b\u0443\u0447\u0438\u0432\u0448\u0430\u044f\u0441\u044f \u0441\u0445\u0435\u043c\u0430 \u0431\u0430\u0437\u044b \u0434\u0430\u043d\u043d\u044b\u0445:</p> <p></p>"},{"location":"lab2/task1/","title":"\u0417\u0430\u0434\u0430\u043d\u0438\u0435 1","text":"<p><code>\u0417\u0430\u0434\u0430\u0447\u0430:</code> \u041d\u0430\u043f\u0438\u0448\u0438\u0442\u0435 \u0442\u0440\u0438 \u0440\u0430\u0437\u043b\u0438\u0447\u043d\u044b\u0445 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u044b \u043d\u0430 Python, \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u044e\u0449\u0438\u0435 \u043a\u0430\u0436\u0434\u044b\u0439 \u0438\u0437 \u043f\u043e\u0434\u0445\u043e\u0434\u043e\u0432: threading, multiprocessing \u0438 async. \u041a\u0430\u0436\u0434\u0430\u044f \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0430 \u0434\u043e\u043b\u0436\u043d\u0430 \u0440\u0435\u0448\u0430\u0442\u044c \u0441\u0447\u0438\u0442\u0430\u0442\u044c \u0441\u0443\u043c\u043c\u0443 \u0432\u0441\u0435\u0445 \u0447\u0438\u0441\u0435\u043b \u043e\u0442 1 \u0434\u043e 1000000. \u0420\u0430\u0437\u0434\u0435\u043b\u0438\u0442\u0435 \u0432\u044b\u0447\u0438\u0441\u043b\u0435\u043d\u0438\u044f \u043d\u0430 \u043d\u0435\u0441\u043a\u043e\u043b\u044c\u043a\u043e \u043f\u0430\u0440\u0430\u043b\u043b\u0435\u043b\u044c\u043d\u044b\u0445 \u0437\u0430\u0434\u0430\u0447 \u0434\u043b\u044f \u0443\u0441\u043a\u043e\u0440\u0435\u043d\u0438\u044f \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f.</p> <p>\u041d\u0430\u043f\u0438\u0448\u0435\u043c \u0444\u0443\u043d\u043a\u0446\u0438\u044e, \u0433\u0434\u0435 \u0432 \u0446\u0438\u043a\u043b\u0435(\u0447\u0442\u043e\u0431\u044b \u0432\u044b\u0433\u043b\u044f\u0434\u0435\u043b\u043e \u0435\u0449\u0435 \u0431\u043e\u043b\u0435\u0435 \u043d\u0435\u043e\u043f\u0442\u0438\u043c\u0438\u0437\u0438\u0440\u043e\u0432\u0430\u043d\u043d\u043e) \u0431\u0443\u0434\u0435\u043c \u0441\u043a\u043b\u0430\u0434\u044b\u0432\u0430\u0442\u044c \u0446\u0438\u0444\u0440\u044b \u043e\u0442 \u0441\u0442\u0430\u0440\u0442\u0430 \u0434\u043e \u0444\u0438\u043d\u0438\u0448\u0430. \u0412 \u043d\u0430\u0438\u0432\u043d\u043e\u043c \u043f\u043e\u0434\u0445\u043e\u0434\u0435 \u043f\u0440\u043e\u0441\u043a\u043b\u0430\u0434\u044b\u0432\u0430\u0435\u043c \u0442\u0430\u043a \u0432\u0441\u0435 \u0447\u0438\u0441\u043b\u0430 \u043f\u043e\u0434\u0440\u044f\u0434 \u043f\u043e\u0441\u043b\u0435\u0434\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u043d\u043e:</p> <pre><code>import time\nfrom dotenv import load_dotenv\nimport os\n\n\ndef calculate_sum(start, end, results, res_id):\n    curr_sum = 0\n    for num in range(start, end + 1):\n        curr_sum += num\n    print(f'task {res_id}, result {curr_sum}')\n    results[res_id] = curr_sum\n\n\nif __name__ == '__main__':\n    load_dotenv()\n    amount = int(os.getenv('AMOUNT'))\n    result_list = [None]\n\n    start_time = time.time()\n\n    calculate_sum(0, amount, result_list, 0)\n    print(sum(result_list))\n    print(time.time() - start_time)\n</code></pre> <p>\u0422\u0435\u043f\u0435\u0440\u044c \u0440\u0430\u0441\u043f\u0430\u0440\u0430\u043b\u043b\u0435\u043b\u0438\u043c \u0441\u043b\u043e\u0436\u0435\u043d\u0438\u0435 \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e \u043f\u043e\u0442\u043e\u043a\u043e\u0432. \u041a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \"\u0440\u0430\u0431\u043e\u0442\u043d\u0438\u043a\u043e\u0432\" \u0437\u0430\u0434\u0430\u0435\u0442\u0441\u044f \u0432 \u043a\u043e\u043d\u0444\u0438\u0433\u0443\u0440\u0430\u0446\u0438\u043e\u043d\u043d\u043e\u043c \u0444\u0430\u0439\u043b\u0435, \u043a\u0430\u0436\u0434\u044b\u0439 \u0432\u044b\u043f\u043e\u043b\u043d\u044f\u0435\u0442  \u043e\u0434\u0438\u043d\u0430\u043a\u043e\u0432\u043e\u0435 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0440\u0430\u0431\u043e\u0442\u044b:</p> <p><pre><code>import threading\nimport time\nfrom task1.naive import calculate_sum\nimport os\nfrom dotenv import load_dotenv\n\n\nif __name__ == '__main__':\n\n    load_dotenv()\n    num_workers = int(os.getenv('NUM_WORKERS'))\n    amount = int(os.getenv('AMOUNT'))\n    load = amount // num_workers\n\n    result_list = [None] * num_workers\n    threads = []\n\n    start_time = time.time()\n\n    for i in range(num_workers):\n        thread = threading.Thread(target=calculate_sum, args=((strt := i*load), strt + load, result_list, i))\n        threads.append(thread)\n        thread.start()\n\n    for thread in threads:\n        thread.join()\n\n    print(sum(result_list))\n    print(time.time() - start_time)\n</code></pre> \u0422\u0435\u043f\u0435\u0440\u044c \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u043c \u043d\u0435\u0441\u043a\u043e\u043b\u044c\u043a\u043e \u043f\u0440\u043e\u0446\u0435\u0441\u0441\u043e\u0432:</p> <pre><code>import multiprocessing\nimport time\nfrom task1.naive import calculate_sum\nimport os\nfrom dotenv import load_dotenv\n\nif __name__ == \"__main__\":\n    load_dotenv()\n    num_workers = int(os.getenv('NUM_WORKERS'))\n    amount = int(os.getenv('AMOUNT'))\n    load = amount // num_workers\n\n    manager = multiprocessing.Manager()\n    result_list = manager.list(range(num_workers))\n    processes = []\n\n    start_time = time.time()\n\n    for i in range(num_workers):\n        process = multiprocessing.Process(target=calculate_sum, args=((strt := i*load), strt + load, result_list, i))\n        processes.append(process)\n        process.start()\n\n    for process in processes:\n        process.join()\n\n    print(sum(result_list))\n    print(time.time() - start_time)\n</code></pre> <p>\u041f\u0440\u0438\u043c\u0435\u043d\u0438\u043c \u0430\u0441\u0438\u043d\u0445\u0440\u043e\u043d\u043d\u043e\u0441\u0442\u044c:</p> <p><pre><code>import asyncio\nimport time\nimport os\nfrom dotenv import load_dotenv\n\n\nasync def calculate_sum(start, end, results, res_id):\n    curr_sum = 0\n    for num in range(start, end+1):\n        curr_sum += num\n    print(f'task {res_id}, result {curr_sum}')\n    results[res_id] = curr_sum\n    # await asyncio.sleep(2)\n\nload_dotenv()\nnum_workers = int(os.getenv('NUM_WORKERS'))\namount = int(os.getenv('AMOUNT'))\nload = amount // num_workers\n\nresult_list = [None] * num_workers\n\nstart_time = time.time()\n\nasync def main():\n    tasks = [calculate_sum((strt := i*load), strt + load, result_list, i) for i in range(num_workers)]\n    await asyncio.gather(*tasks)\n\nasyncio.run(main())\n\nprint(sum(result_list))\nprint(time.time() - start_time)\n</code></pre> \u041f\u0440\u043e\u0442\u0435\u0441\u0442\u0438\u0440\u0443\u0435\u043c \u043d\u0430 \u0447\u0438\u0441\u043b\u0430\u0445 \u043e\u0442 1 \u0434\u043e 1 \u043c\u043b\u043d (\u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u044b \u0432 \u0441\u0435\u043a\u0443\u043d\u0434\u0430\u0445):</p> \u2116 naive threading multiprocessing asyncio 1 0.04633 0.07138 0.38010 0.05205 2 0.04681 0.04980 0.31648 0.03665 3 0.05610 0.05826 0.34530 0.05594 <p>\u041d\u0430\u0438\u0432\u043d\u044b\u0439 \u043c\u0435\u0442\u043e\u0434, \u043f\u043e\u0442\u043e\u043a\u0438 \u0438 \u0430\u0441\u0438\u043d\u0445\u0440\u043e\u043d\u043d\u043e\u0441\u0442\u044c \u043f\u043e\u043a\u0430\u0437\u0430\u043b\u0438 \u043f\u043e\u0445\u043e\u0436\u0438\u0439 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442. \u041c\u0443\u043b\u044c\u0442\u0438\u043f\u0440\u043e\u0446\u0435\u0441\u0441\u043d\u043e\u0441\u0442\u044c \u043c\u0435\u0434\u043b\u0435\u043d\u043d\u0435\u0435, \u043f\u043e\u0442\u043e\u043c\u0443 \u0447\u0442\u043e \u0438\u043d\u0438\u0446\u0438\u0430\u043b\u0438\u0437\u0438\u0440\u043e\u0432\u0430\u0442\u044c \u043f\u0440\u043e\u0446\u0435\u0441\u0441\u044b - \u044d\u0442\u043e \u0434\u043e\u043b\u0433\u043e.</p> <p>\u0410 \u0442\u0435\u043f\u0435\u0440\u044c \u043f\u0440\u043e\u0442\u0435\u0441\u0442\u0438\u0440\u0443\u0435\u043c \u043d\u0430 \u0447\u0438\u0441\u043b\u0430\u0445 \u043e\u0442 1 \u0434\u043e 100 \u043c\u043b\u043d (\u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u044b \u0432 \u0441\u0435\u043a\u0443\u043d\u0434\u0430\u0445):</p> \u2116 naive threading multiprocessing asyncio 1 5.13490 5.74657 1.66466 5.24498 2 4.33271 5.92088 1.57994 4.26132 3 5.07361 6.01106 1.74795 4.55392 <p>\u041a\u0430\u043a \u0432\u0438\u0434\u043d\u043e, \u0434\u043b\u0438\u0442\u0435\u043b\u044c\u043d\u043e\u0441\u0442\u044c \u0438\u043d\u0438\u0446\u0438\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u0438 \u043f\u0440\u043e\u0446\u0435\u0441\u0441\u043e\u0432 \u043e\u043a\u0443\u043f\u0438\u043b\u0430\u0441\u044c, \u0438 \u0441\u043a\u0440\u0438\u043f\u0442 \u0441 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0435\u043c \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0438 multiprocessing \u0441\u0440\u0430\u0431\u043e\u0442\u0430\u043b \u0431\u044b\u0441\u0442\u0440\u0435\u0435 \u0434\u0440\u0443\u0433\u0438\u0445.</p> <p>\u0412\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0442\u044c \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f \u0438\u0437 \u0444\u0443\u043d\u043a\u0446\u0438\u0439 - \u043a\u0430\u0436\u0435\u0442\u0441\u044f \u043d\u0435 \u043e\u0447\u0435\u043d\u044c \u043f\u043e\u0434\u0445\u043e\u0434\u044f\u0449\u0435\u0435 \u0434\u0435\u043b\u043e \u0434\u043b\u044f \u0440\u0430\u0441\u043f\u0430\u0440\u0430\u043b\u043b\u0435\u043b\u0438\u0432\u0430\u043d\u0438\u044f. \u041e\u0431\u044b\u0447\u043d\u043e \u0442\u0430\u043a\u0438\u0435 \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0438 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u044e\u0442\u0441\u044f \u043f\u0440\u0438 \u0437\u0430\u0434\u0430\u0447\u0430\u0445 \u0432\u0432\u043e\u0434\u0430-\u0432\u044b\u0432\u043e\u0434\u0430, \u0441\u0435\u0440\u0432\u0435\u0440\u0430-\u043a\u043b\u0438\u0435\u043d\u0442\u0430. \u0412\u043e\u0437\u043c\u043e\u0436\u043d\u043e \u043f\u043e\u044d\u0442\u043e\u043c\u0443 \u0437\u0434\u0435\u0441\u044c \u043e\u043d\u0438 \u043d\u0435 \u043f\u043e\u043a\u0430\u0437\u0430\u043b\u0438 \u0432\u0441\u0435, \u043d\u0430 \u0447\u0442\u043e \u0441\u043f\u043e\u0441\u043e\u0431\u043d\u044b)</p>"},{"location":"lab2/task2/","title":"\u0417\u0430\u0434\u0430\u043d\u0438\u0435 2","text":"<p><code>\u0417\u0430\u0434\u0430\u0447\u0430:</code> \u041d\u0430\u043f\u0438\u0448\u0438\u0442\u0435 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0443 \u043d\u0430 Python \u0434\u043b\u044f \u043f\u0430\u0440\u0430\u043b\u043b\u0435\u043b\u044c\u043d\u043e\u0433\u043e \u043f\u0430\u0440\u0441\u0438\u043d\u0433\u0430 \u043d\u0435\u0441\u043a\u043e\u043b\u044c\u043a\u0438\u0445 \u0432\u0435\u0431-\u0441\u0442\u0440\u0430\u043d\u0438\u0446 \u0441 \u0441\u043e\u0445\u0440\u0430\u043d\u0435\u043d\u0438\u0435\u043c \u0434\u0430\u043d\u043d\u044b\u0445 \u0432 \u0431\u0430\u0437\u0443 \u0434\u0430\u043d\u043d\u044b\u0445 \u0441 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0435\u043c \u043f\u043e\u0434\u0445\u043e\u0434\u043e\u0432 threading, multiprocessing \u0438 async. \u041a\u0430\u0436\u0434\u0430\u044f \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0430 \u0434\u043e\u043b\u0436\u043d\u0430 \u043f\u0430\u0440\u0441\u0438\u0442\u044c \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044e \u0441 \u043d\u0435\u0441\u043a\u043e\u043b\u044c\u043a\u0438\u0445 \u0432\u0435\u0431-\u0441\u0430\u0439\u0442\u043e\u0432, \u0441\u043e\u0445\u0440\u0430\u043d\u044f\u0442\u044c \u0438\u0445 \u0432 \u0431\u0430\u0437\u0443 \u0434\u0430\u043d\u043d\u044b\u0445.</p> <p>\u0412 \u044d\u0442\u043e\u043c \u0437\u0430\u0434\u0430\u043d\u0438\u0438 \u0431\u0443\u0434\u0435\u043c \u0437\u0430\u043f\u043e\u043b\u043d\u044f\u0442\u044c \u0442\u0430\u0431\u043b\u0438\u0446\u0443 Account (\u041f\u043b\u0430\u0442\u0435\u0436\u043d\u044b\u0439 \u0430\u043a\u043a\u0430\u0443\u043d\u0442/\u0441\u0440\u0435\u0434\u0441\u0442\u0432\u043e) \u0438\u0437 \u043f\u0440\u0435\u0434\u044b\u0434\u0443\u0449\u0435\u0439 \u043b\u0430\u0431\u043e\u0440\u0430\u0442\u043e\u0440\u043d\u043e\u0439 \u0440\u0430\u0431\u043e\u0442\u044b. \u0414\u043b\u044f \u044d\u0442\u043e\u0433\u043e \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u043c \u0441\u0430\u0439\u0442 \u0441\u043e \u0441\u043f\u0438\u0441\u043a\u043e\u043c \u043a\u0440\u0438\u043f\u0442\u043e\u0432\u0430\u043b\u044e\u0442.</p> <p>\u042d\u0442\u043e\u0442 \u0441\u043a\u0440\u0438\u043f\u0442 \u043f\u043e\u043c\u043e\u0436\u0435\u0442 \u0441\u043e\u0431\u0440\u0430\u0442\u044c \u0432\u0441\u0435 \u0441\u0441\u044b\u043b\u043a\u0438 \u043d\u0430 \u0441\u0442\u0440\u0430\u043d\u0438\u0446\u044b \u043a\u0440\u0438\u043f\u0442\u043e\u0432\u0430\u043b\u044e\u0442 \u0438 \u0441\u043e\u0445\u0440\u0430\u043d\u0438\u0442 \u0438\u0445 \u0432 \u0444\u0430\u0439\u043b\u0435 settings.py.</p> <pre><code>import requests\nfrom bs4 import BeautifulSoup\n\nurl = 'https://cryptorank.io/all-coins-list'\nresponse = requests.get(url)\n\nurls_list = []\n\nif response.status_code == 200:\n    soup = BeautifulSoup(response.text, 'html.parser')\n\n    first_ten_cryptos = soup.find_all(class_=\"sc-39ba2409-1 bgOSTi\")\n    for crypto in first_ten_cryptos:\n        urls_list.append(crypto.get('href'))\n\n    other_cryptos = soup.find_all(class_=\"loading-name-cell-2\")\n    for crypto in other_cryptos:\n        a = crypto.find('a')\n        urls_list.append(a.get('href'))\nelse:\n    print(f\"Failed to fetch data. Status code: {response.status_code}\")\n\n\nsettings_file_path = \"settings.py\"\nwith open(settings_file_path, \"w\") as file:\n    # Write the list to the settings.py file\n    file.write(\"URLS = {}\\n\".format(urls_list))\n</code></pre> <p>\u0414\u0430\u043b\u0435\u0435 \u0440\u0435\u0430\u043b\u0438\u0437\u0443\u0435\u043c \u0444\u0443\u043d\u043a\u0446\u0438\u0438 \u0434\u043b\u044f \u043f\u0430\u0440\u0441\u0438\u043d\u0433\u0430 \u043d\u0430\u0437\u0432\u0430\u043d\u0438\u044f \u043a\u0440\u0438\u043f\u0442\u043e\u0432\u0430\u043b\u044e\u0442\u044b \u0438 \u0442\u0435\u043a\u0443\u0449\u0435\u0439 \u0446\u0435\u043d\u044b \u0438 \u0441\u043e\u0445\u0440\u0430\u043d\u0435\u043d\u0438\u044f \u044d\u0442\u043e\u0439 \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u0438 \u0432 \u0431\u0430\u0437\u0443 \u0434\u0430\u043d\u043d\u044b\u0445 ( \u043f\u0440\u0435\u0434\u043f\u043e\u043b\u043e\u0436\u0438\u043c, \u0447\u0442\u043e \u0443 \u043d\u0430\u0441 \u0435\u0441\u0442\u044c \u043f\u043e \u043e\u0434\u043d\u043e\u0439 \u043c\u043e\u043d\u0435\u0442\u0435 \u043a\u0430\u0436\u0434\u043e\u0439 \u043a\u0440\u0438\u043f\u0442\u043e\u0432\u0430\u043b\u044e\u0442\u044b, \u0442\u043e\u0433\u0434\u0430 \u0431\u0430\u043b\u0430\u043d\u0441 \u043d\u0430\u0448\u0435\u0433\u043e \"\u043a\u0440\u0438\u043f\u0442\u043e\u043a\u043e\u0448\u0435\u043b\u044c\u043a\u0430\" \u0431\u0443\u0434\u0435\u0442 \u0440\u0430\u0432\u0435\u043d \u0442\u0435\u043a\u0443\u0449\u0435\u0439 \u0446\u0435\u043d\u0435 \u043e\u0434\u043d\u043e\u0433\u043e \u0442\u043e\u043a\u0435\u043d\u0430) \u0412 \u044d\u0442\u043e\u043c \u0436\u0435 \u0444\u0430\u0439\u043b\u0435 \u0437\u0430\u043f\u0443\u0441\u043a \u043d\u0430\u0438\u0432\u043d\u043e\u0433\u043e \u043f\u043e\u0434\u0445\u043e\u0434\u0430, \u043f\u0440\u0438 \u043a\u043e\u0442\u043e\u0440\u043e\u043c \u043c\u044b \u043f\u043e\u0441\u043b\u0435\u0434\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u043d\u043e \u0441\u043e\u0431\u0438\u0440\u0430\u0435\u043c \u0438 \u0441\u043e\u0445\u0440\u0430\u043d\u044f\u0435\u043c \u0434\u0430\u043d\u043d\u044b\u0435 \u0434\u043b\u044f \u043a\u0430\u0436\u0434\u043e\u0433\u043e \u0430\u0434\u0440\u0435\u0441\u0430.</p> <p><pre><code>import requests\nfrom bs4 import BeautifulSoup\nfrom lab1.models import SQLModel, Account\nfrom task2.settings import URLS\nfrom sqlalchemy import create_engine\nfrom sqlalchemy.orm import sessionmaker\nimport time\nimport os\nfrom dotenv import load_dotenv\nload_dotenv()\n\n\ndb_url = os.getenv('DB_ADDRESS')\nengine = create_engine(db_url)\nSQLModel.metadata.create_all(engine)\nSession = sessionmaker(bind=engine)\n\n\ndef parse(crypto_url):\n\n    url = 'https://cryptorank.io' + crypto_url\n    response = requests.get(url)\n    name_str, price_int = '', 0\n\n    if response.status_code == 200:\n        soup = BeautifulSoup(response.text, 'html.parser')\n\n        name = soup.find(class_=\"sc-b7cd6de0-0 sc-a4def8f2-9 iYEMqG kqBEPt\")\n        name_str = name.text.replace('\\xa0', '') if name else ''\n\n        price = soup.find(class_=\"sc-be4b7d84-0 sc-3f59c54e-1 lfEaaA kVlkDl\")\n        price_str = price.find('div', class_='sc-cb748c3-0 cwWsJH').get_text()\n        try:\n            price_int = round(float(price_str.replace(',', '')))\n        except ValueError:\n            price_int = 0\n    else:\n        print(f\"Failed to fetch data. Status code: {response.status_code}\")\n\n    return {\"name\": name_str, \"balance\": price_int, \"user_id\": 1}\n\n\n# Function to populate and send data to the database\ndef save(parsed_data):\n    session = Session()\n    try:\n        account = Account(**parsed_data)\n        session.add(account)\n        session.commit()\n        print(\"Data successfully added to the database.\")\n\n    except Exception as e:\n        session.rollback()\n        print(f\"An error occurred: {e}\")\n\n    finally:\n        session.close()\n\n\ndef parse_and_save(url):\n    data = parse(url)\n    save(data)\n\n\nif __name__ == \"__main__\":\n    start_time = time.time()\n    for url in URLS[:31]:\n        parse_and_save(url)\n    print(time.time() - start_time)\n</code></pre> \u0422\u0435\u043f\u0435\u0440\u044c \u0440\u0430\u0441\u043f\u0430\u0440\u0430\u043b\u043b\u0435\u043b\u0438\u043c \u043f\u0430\u0440\u0441\u0438\u043d\u0433 \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e \u043f\u043e\u0442\u043e\u043a\u043e\u0432:</p> <p><pre><code>import threading\nfrom task2.settings import URLS\nfrom naive import parse_and_save\nimport time\n\nthreads = []\n\nstart_time = time.time()\n\nfor url in URLS[:31]:\n    thread = threading.Thread(target=parse_and_save, args=(url,))\n    threads.append(thread)\n    thread.start()\n\nfor thread in threads:\n    thread.join()\n\nprint(time.time() - start_time)\n</code></pre> \u0421 \u043f\u043e\u043c\u043e\u0449\u044c\u044e \u043f\u0440\u043e\u0446\u0435\u0441\u0441\u043e\u0432:</p> <p><pre><code>from multiprocessing import Process\nfrom task2.settings import URLS\nfrom naive import parse_and_save\nimport time\n\n\ndef main():\n    processes = []\n    start_time = time.time()\n\n    for url in URLS[:31]:\n        process = Process(target=parse_and_save, args=(url,))\n        processes.append(process)\n        process.start()\n\n    for process in processes:\n        process.join()\n\n    print(time.time() - start_time)\n\n\nif __name__ == '__main__':\n    main()\n</code></pre> \u0418 \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e \u0430\u0441\u0438\u043d\u0445\u0440\u043e\u043d\u043d\u043e\u0441\u0442\u0438:</p> <p><pre><code>import aiohttp\nimport asyncio\nfrom bs4 import BeautifulSoup\nfrom task2.settings import URLS\nfrom lab1.models import SQLModel, Account\nimport time\nfrom sqlalchemy import create_engine\nfrom sqlalchemy.orm import sessionmaker\nimport os\nfrom dotenv import load_dotenv\nload_dotenv()\n\n\ndb_url = os.getenv('DB_ADDRESS')\nengine = create_engine(db_url)\nSQLModel.metadata.create_all(engine)\nSession = sessionmaker(bind=engine)\n\n\nasync def fetch_data(url):\n    async with aiohttp.ClientSession() as session:\n        async with session.get(url) as response:\n            if response.status == 200:\n                html = await response.text()\n                soup = BeautifulSoup(html, 'html.parser')\n                name = soup.find(class_=\"sc-b7cd6de0-0 sc-a4def8f2-9 iYEMqG kqBEPt\")\n                price = soup.find(class_=\"sc-be4b7d84-0 sc-3f59c54e-1 lfEaaA kVlkDl\")\n                name_str = name.text.replace('\\xa0', '') if name else ''\n                price_str = price.find('div', class_='sc-cb748c3-0 cwWsJH').get_text() if price else '0'\n                try:\n                    price_int = round(float(price_str.replace(',', '')))\n                except ValueError:\n                    price_int = 0\n                return {\"name\": name_str, \"balance\": price_int, \"user_id\": 1}\n            else:\n                print(f\"Failed to fetch data. Status code: {response.status}\")\n                return {\"name\": '', \"balance\": 0, \"user_id\": 1}\n\n\nasync def save_data(parsed_data):\n    with Session() as session:\n        try:\n            account = Account(**parsed_data)\n            session.add(account)\n            session.commit()\n            print(\"Data successfully added to the database.\")\n        except Exception as e:\n            session.rollback()\n            print(f\"An error occurred: {e}\")\n\n\nasync def parse_and_save(url):\n    data = await fetch_data('https://cryptorank.io' + url)\n    await save_data(data)\n\n\nasync def main(urls):\n    tasks = [parse_and_save(url) for url in urls]\n    await asyncio.gather(*tasks)\n\n\nif __name__ == '__main__':\n    start_time = time.time()\n\n    asyncio.run(main(URLS[:31]))\n\n    print(time.time() - start_time)\n</code></pre> \u0421\u0440\u0430\u0432\u043d\u0438\u0442\u0435\u043b\u044c\u043d\u0430\u044f \u0442\u0430\u0431\u043b\u0438\u0446\u0430 \u0432\u0440\u0435\u043c\u0435\u043d\u0438 \u0440\u0430\u0431\u043e\u0442\u044b \u0432 \u0441\u0435\u043a\u0443\u043d\u0434\u0430\u0445:</p> \u2116 naive threading multiprocessing asyncio 1 11.13098 1.79124 10.08855 1.303249 2 11.81796 1.48701 9.557107 1.543544 3 10.52666 1.38947 10.33533 1.49618 <p>\u0421\u0440\u0435\u0434\u0438 \u043d\u0435\u043d\u0430\u0438\u0432\u043d\u0438\u0445 \u043f\u043e\u0434\u0445\u043e\u0434\u043e\u0432 \u0445\u0443\u0436\u0435 \u0432\u0441\u0435\u0445 \u043f\u043e\u043a\u0430\u0437\u0430\u043b\u0430 \u0441\u0435\u0431\u044f \u043c\u0443\u043b\u044c\u0442\u0438\u043f\u0440\u043e\u0446\u0435\u0441\u0441\u043d\u043e\u0441\u0442\u044c :( \u041d\u043e \u0432\u0441\u0435 \u0440\u0430\u0432\u043d\u043e \u043c\u0435\u0442\u043e\u0434\u044b \u0440\u0430\u0441\u043f\u0430\u0440\u0430\u043b\u043b\u0435\u043b\u0438\u0432\u0430\u043d\u0438\u044f \u043f\u0430\u0440\u0441\u0438\u043d\u0433\u0430 \u0434\u0430\u044e\u0442 \u0441\u0443\u0449\u0435\u0441\u0442\u0432\u0435\u043d\u043d\u043e\u0435 \u0443\u043b\u0443\u0447\u0448\u0435\u043d\u0438\u0435 \u043f\u043e \u0432\u0440\u0435\u043c\u0435\u043d\u0438.</p>"},{"location":"lab3/docker/","title":"\u0423\u043f\u0430\u043a\u043e\u0432\u043a\u0430 \u0432 Docker","text":"<p><code>\u0417\u0430\u0434\u0430\u0447\u0430:</code>  \u041d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e \u0441\u043e\u0437\u0434\u0430\u0442\u044c Dockerfile \u0434\u043b\u044f \u0443\u043f\u0430\u043a\u043e\u0432\u043a\u0438 FastAPI \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f \u0438 \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f \u0441 \u043f\u0430\u0440\u0435\u0441\u0435\u0440\u043e\u043c. \u0412 Dockerfile \u0443\u043a\u0430\u0437\u0430\u0442\u044c \u0431\u0430\u0437\u043e\u0432\u044b\u0439 \u043e\u0431\u0440\u0430\u0437, \u0443\u0441\u0442\u0430\u043d\u043e\u0432\u0438\u0442\u044c \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u044b\u0435 \u0437\u0430\u0432\u0438\u0441\u0438\u043c\u043e\u0441\u0442\u0438, \u0441\u043a\u043e\u043f\u0438\u0440\u043e\u0432\u0430\u0442\u044c \u0438\u0441\u0445\u043e\u0434\u043d\u044b\u0435 \u0444\u0430\u0439\u043b\u044b \u0432 \u043a\u043e\u043d\u0442\u0435\u0439\u043d\u0435\u0440 \u0438 \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u0438\u0442\u044c \u043a\u043e\u043c\u0430\u043d\u0434\u0443 \u0434\u043b\u044f \u0437\u0430\u043f\u0443\u0441\u043a\u0430 \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f.</p> <p>Dockerfile \u0434\u043b\u044f \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f \u0443\u0447\u0435\u0442\u0430 \u043b\u0438\u0447\u043d\u044b\u0445 \u0444\u0438\u043d\u0430\u043d\u0441\u043e\u0432</p> <pre><code># Dockerfile for finance_app\nFROM python:3.10.5\n\nWORKDIR /app\n\nCOPY ./requirements.txt /app/requirements.txt\nRUN pip install -r requirements.txt\n\nCOPY . .\n\nCMD [\"uvicorn\", \"main:app\", \"--host\", \"0.0.0.0\", \"--port\", \"8000\"]\n</code></pre> <p>Dockerfile \u0434\u043b\u044f \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f \u043f\u0430\u0440\u0441\u0435\u0440\u0430</p> <pre><code># Dockerfile for parser_app\nFROM python:3.10.5\n\nWORKDIR /app\n\nCOPY ./requirements.txt /app/requirements.txt\nRUN pip install -r requirements.txt\n\nCOPY . .\n\nCMD [\"uvicorn\", \"main:app\", \"--host\", \"0.0.0.0\", \"--port\", \"8001\"]\n</code></pre> <p>docker-compose.yml <pre><code>version: '3'\n\nservices:\n  finance_app:\n    build: ./finance_app\n    ports:\n      - \"8000:8000\"\n    depends_on:\n      - db\n      - parser_app\n      - redis\n      - celery_worker\n    environment:\n      DB_ADDRESS: postgresql://postgres:271120@db/finance\n\n  parser_app:\n    build: ./parser_app\n    ports:\n      - \"8001:8001\"\n    depends_on:\n      - db\n    environment:\n      DB_ADDRESS: postgresql://postgres:271120@db/finance\n\n  db:\n    image: postgres\n    ports:\n      - \"5433:5433\"\n    environment:\n      POSTGRES_DB: finance\n      POSTGRES_USER: postgres\n      POSTGRES_PASSWORD: 271120\n</code></pre></p>"},{"location":"lab3/parser/","title":"\u042d\u043d\u0434\u043f\u043e\u0439\u043d\u0442 \u043f\u0430\u0440\u0441\u0435\u0440\u0430","text":"<p><code>\u0417\u0430\u0434\u0430\u0447\u0430:</code> \u041d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e \u0434\u043e\u0431\u0430\u0432\u0438\u0442\u044c \u0432 FastAPI \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u0435 \u0435\u043d\u0434\u043f\u043e\u0438\u043d\u0442, \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u0431\u0443\u0434\u0435\u0442 \u043f\u0440\u0438\u043d\u0438\u043c\u0430\u0442\u044c \u0437\u0430\u043f\u0440\u043e\u0441\u044b \u0441 URL \u0434\u043b\u044f \u043f\u0430\u0440\u0441\u0438\u043d\u0433\u0430 \u043e\u0442 \u043a\u043b\u0438\u0435\u043d\u0442\u0430, \u043e\u0442\u043f\u0440\u0430\u0432\u043b\u044f\u0442\u044c \u0437\u0430\u043f\u0440\u043e\u0441 \u043f\u0430\u0440\u0441\u0435\u0440\u0443 (\u0437\u0430\u043f\u0443\u0449\u0435\u043d\u043d\u043e\u043c\u0443 \u0432 \u043e\u0442\u0434\u0435\u043b\u044c\u043d\u043e\u043c \u043a\u043e\u043d\u0442\u0435\u0439\u043d\u0435\u0440\u0435) \u0438 \u0432\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0442\u044c \u043e\u0442\u0432\u0435\u0442 \u0441 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u043e\u043c \u043a\u043b\u0438\u0435\u043d\u0442\u0443.</p> <p>\u0424\u0430\u0439\u043b main.py \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f \u043f\u0430\u0440\u0441\u0435\u0440\u0430</p> <pre><code>from fastapi import FastAPI\nimport uvicorn\nfrom parser.threading_parser import crypto_parse\nfrom parser.settings import URLS\n\napp = FastAPI()\n\n\n@app.post(\"/parse_cryptocurrencies/num\")\ndef parse(num: int):\n    account_post_data = crypto_parse(num)\n    return account_post_data\n</code></pre> <p>\u0424\u0430\u0439\u043b main.py \u0433\u043b\u0430\u0432\u043d\u043e\u0433\u043e \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f:</p> <pre><code>from fastapi import FastAPI, HTTPException, Depends\nfrom connections import init_db, get_session\nfrom sqlalchemy.orm import Session\nimport requests\nimport uvicorn\n\n\n@app.post(\"/celery_parse_books/num\", tags=['parser'])\ndef celery_crypto_parser(num: int, session: Session = Depends(get_session)):\n    headers = {\"accept\": \"application/json\"}\n    try:\n        response = requests.post(\n            f\"http://parser_app:8001/celery_parse_cryptocurrencies/num?num={num}\",\n            headers=headers,\n        )\n        response.raise_for_status()\n        return {\"message\": \"Parsing successful\"}\n    except:\n        raise HTTPException(status_code=500, detail=\"Parsing unsuccessful\")\n</code></pre>"},{"location":"lab3/queue/","title":"\u0412\u044b\u0437\u043e\u0432 \u043f\u0430\u0440\u0441\u0435\u0440\u0430 \u0447\u0435\u0440\u0435\u0437 \u043e\u0447\u0435\u0440\u0435\u0434\u044c","text":"<p><code>\u0417\u0430\u0434\u0430\u0447\u0430:</code> \u041d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e \u0434\u043e\u0431\u0430\u0432\u0438\u0442\u044c \u0437\u0430\u0432\u0438\u0441\u0438\u043c\u043e\u0441\u0442\u0438 \u0434\u043b\u044f Celery \u0438 Redis \u0432 \u043f\u0440\u043e\u0435\u043a\u0442. Celery \u0431\u0443\u0434\u0435\u0442 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c\u0441\u044f \u0434\u043b\u044f \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0438 \u0437\u0430\u0434\u0430\u0447 \u0432 \u0444\u043e\u043d\u0435, \u0430 Redis \u0431\u0443\u0434\u0435\u0442 \u0432\u044b\u0441\u0442\u0443\u043f\u0430\u0442\u044c \u0432 \u0440\u043e\u043b\u0438 \u0431\u0440\u043e\u043a\u0435\u0440\u0430 \u0437\u0430\u0434\u0430\u0447 \u0438 \u0445\u0440\u0430\u043d\u0438\u043b\u0438\u0449\u0430 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u043e\u0432.</p> <p>\u041f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u0435 Celery \u0438 \u0437\u0430\u0434\u0430\u0447\u0430 \u0434\u043b\u044f \u043d\u0435\u0433\u043e:</p> <pre><code>from celery import Celery\nfrom parser.parse_utils import parse, save\n\ncelery_app = Celery(\n    \"tasks\", broker=\"redis://redis:6379/0\", backend=\"redis://redis:6379/0\"\n)\n\ncelery_app.conf.update(\n    task_serializer=\"json\",\n    accept_content=[\"json\"],\n    result_serializer=\"json\",\n    timezone=\"UTC\",\n    enable_utc=True,\n)\n\n@celery_app.task\ndef celery_parse_and_save(url):\n    data = parse(url)\n    save(data)\n    print(f\"Saved currency: {data['name']}\")\n</code></pre> <p>\u0424\u0430\u0439\u043b main.py \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f \u043f\u0430\u0440\u0441\u0435\u0440\u0430</p> <pre><code>from fastapi import FastAPI\nimport uvicorn\nfrom parser.threading_parser import crypto_parse\nfrom parser.settings import URLS\n\napp = FastAPI()\n\n\n@app.post(\"/celery_parse_cryptocurrencies/num\")\ndef parse_async(num: int):\n    urls_slice = URLS[:num]\n    for url in urls_slice:\n        celery_parse_and_save.delay(url)\n    return {\"message\": \"Parsing started\"}\n</code></pre> <p>\u0424\u0430\u0439\u043b main.py \u0433\u043b\u0430\u0432\u043d\u043e\u0433\u043e \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f:</p> <pre><code>from fastapi import FastAPI, HTTPException, Depends\nfrom connections import init_db, get_session\nfrom sqlalchemy.orm import Session\nimport requests\nimport uvicorn\n</code></pre> <p>\u0414\u043e\u0431\u0430\u0432\u043b\u0435\u043d\u0438\u0435 \u0432 \u0444\u0430\u0439\u043b docker-compose.yml:</p> <pre><code>  redis:\n    image: redis:latest\n    container_name: redis\n    ports:\n      - \"6379:6379\"\n\n  celery_worker:\n    build: ./parser_app\n    command: celery -A parser.celery_parser worker --loglevel=info\n    depends_on:\n      - redis\n      - db\n    environment:\n      DB_ADDRESS: postgresql://postgres:271120@db/finance\n    volumes:\n      - ./parser_app:/app  # Adjust the volume mapping as needed\n</code></pre>"}]}